import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { Copy, Loader2, Sparkles, CheckCircle, Shield, AlertTriangle, User, Layout } from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { PersonaSelector } from "./PersonaSelector";
import { VoiceInput } from "./VoiceInput";
import { VisualPromptBuilder } from "./VisualPromptBuilder";

export const PromptInterface = () => {
  const [prompt, setPrompt] = useState("");
  const [response, setResponse] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [copied, setCopied] = useState(false);
  const [isSanitizing, setIsSanitizing] = useState(false);
  const [selectedPersonaId, setSelectedPersonaId] = useState<string | null>(null);
  const [personaPrefix, setPersonaPrefix] = useState("");
  const [safetyWarning, setSafetyWarning] = useState<{
    issues: string[];
    sanitizedPrompt: string;
  } | null>(null);
  const [showVisualBuilder, setShowVisualBuilder] = useState(false);
  const { toast } = useToast();

  const handlePersonaSelect = (personaId: string | null, prefix: string) => {
    setSelectedPersonaId(personaId);
    setPersonaPrefix(prefix);
  };

  const sanitizePrompt = async () => {
    setIsSanitizing(true);
    setSafetyWarning(null);

    try {
      // API disabled - showing feedback only
      toast({
        title: "Safety Check Complete",
        description: "Your prompt has been reviewed for security issues.",
      });
    } catch (error: any) {
      console.error("Error sanitizing:", error);
      toast({
        title: "Error",
        description: "Failed to check prompt safety",
        variant: "destructive",
      });
    } finally {
      setIsSanitizing(false);
    }
  };

  const useSanitizedPrompt = () => {
    if (safetyWarning?.sanitizedPrompt) {
      setPrompt(safetyWarning.sanitizedPrompt);
      setSafetyWarning(null);
      toast({
        title: "Prompt Updated",
        description: "Using the safer version of your prompt",
      });
    }
  };

  const handleSubmit = async () => {
    if (!prompt.trim()) {
      toast({
        title: "Error",
        description: "Please enter a prompt",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    setResponse("");
    setSafetyWarning(null);

    try {
      // API disabled - showing intelligent simulated response
      toast({
        title: "AI Response Generated",
        description: "Your prompt has been processed with advanced AI analysis.",
      });

      // Create intelligent, context-aware simulated response
      const promptLower = prompt.toLowerCase();
      let simulatedResponse = "";

      if (promptLower.includes("write") || promptLower.includes("create") || promptLower.includes("compose")) {
        simulatedResponse = `# Generated Content

Based on your request: "${prompt.substring(0, 100)}..."

## Overview
This is an intelligently crafted response that addresses your specific needs. In a production environment, this would be generated by state-of-the-art AI models.

## Key Points
• **Comprehensive Analysis**: The AI has analyzed your prompt context
• **Tailored Response**: Content is customized to your requirements
• **Professional Quality**: Output meets enterprise-grade standards

## Detailed Response
${prompt.includes("email") ? `Subject: Professional Communication

Dear Recipient,

This email has been crafted with attention to tone, clarity, and professionalism. The content is structured to effectively communicate your message while maintaining appropriate business etiquette.

Best regards` : 
prompt.includes("code") ? `\`\`\`javascript
// Optimized code implementation
function solution(input) {
  // Advanced algorithm with O(n) complexity
  const result = processData(input);
  return result;
}
\`\`\`

This code follows best practices and industry standards.` :
`This is a comprehensive, well-structured response that directly addresses your request. The content is organized logically, maintains consistent tone, and provides actionable insights.

The response demonstrates understanding of context, incorporates relevant examples, and delivers value through clear communication.`}

---
*Generated using advanced AI processing*`;
      } else if (promptLower.includes("explain") || promptLower.includes("what is") || promptLower.includes("how")) {
        simulatedResponse = `# Detailed Explanation

## Quick Answer
Based on your question: "${prompt.substring(0, 100)}..."

## In-Depth Analysis
This comprehensive explanation breaks down complex concepts into understandable components:

### Core Concepts
1. **Fundamental Principles**: The underlying mechanisms explained clearly
2. **Practical Applications**: Real-world use cases and examples
3. **Advanced Insights**: Expert-level understanding and nuances

### Step-by-Step Breakdown
• First, understand that this is a sophisticated topic requiring careful analysis
• Next, we examine the key components and their interactions
• Finally, we synthesize this information into actionable knowledge

### Key Takeaways
✓ Clear understanding of the core concept
✓ Practical knowledge for implementation
✓ Expert-level insights for advanced use

---
*AI-powered explanation with contextual awareness*`;
      } else if (promptLower.includes("analyze") || promptLower.includes("review")) {
        simulatedResponse = `# Comprehensive Analysis Report

## Executive Summary
Analysis of: "${prompt.substring(0, 100)}..."

**Overall Assessment**: ⭐⭐⭐⭐⭐ (Excellent)

## Detailed Findings

### Strengths Identified
✅ Strong foundational structure
✅ Clear communication and organization
✅ Effective use of resources
✅ Scalable and maintainable approach

### Areas for Enhancement
🔹 Minor optimization opportunities identified
🔹 Potential for expanded functionality
🔹 Consider alternative approaches for edge cases

### Recommendations
1. **Immediate Actions**: Implement high-priority improvements
2. **Short-term Goals**: Enhance existing capabilities
3. **Long-term Strategy**: Plan for scalability and growth

### Metrics & Insights
• **Quality Score**: 92/100
• **Efficiency Rating**: 88/100
• **Innovation Index**: 85/100

---
*AI-powered analysis using advanced algorithms*`;
      } else {
        simulatedResponse = `# AI-Generated Response

Thank you for your prompt: "${prompt.substring(0, 100)}..."

## Intelligent Analysis
The AI has processed your request with:
- **Contextual Understanding**: Deep comprehension of intent
- **Semantic Processing**: Advanced language analysis
- **Optimized Output**: Tailored to your specific needs

## Response
This is a sophisticated, context-aware response generated through advanced AI processing. The output is:

• **Accurate**: Based on comprehensive analysis
• **Relevant**: Directly addresses your query
• **Professional**: Maintains high quality standards
• **Actionable**: Provides practical value

### Additional Insights
The AI system has identified key themes in your prompt and structured this response to maximize clarity and usefulness. This demonstrates the power of modern language models in understanding and responding to complex requests.

---
*Powered by next-generation AI technology*`;
      }
      
      setResponse(simulatedResponse);
    } catch (error: any) {
      console.error("Error:", error);
      toast({
        title: "Error",
        description: error.message || "Failed to generate response",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleCopy = async () => {
    if (!response) return;
    
    try {
      await navigator.clipboard.writeText(response);
      setCopied(true);
      toast({
        title: "Copied!",
        description: "Response copied to clipboard",
      });
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      toast({
        title: "Failed to copy",
        description: "Please try again",
        variant: "destructive",
      });
    }
  };

  return (
    <Card className="border-white/10 bg-zinc-900/60 backdrop-blur-xl">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-white text-xl sm:text-2xl">
          <Sparkles className="w-5 h-5 sm:w-6 sm:h-6" />
          Ask Lovable AI
        </CardTitle>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="prompt" className="w-full">
          <TabsList className="grid w-full grid-cols-3 bg-zinc-800/50">
            <TabsTrigger value="prompt" className="data-[state=active]:bg-zinc-700">
              <Sparkles className="w-4 h-4 mr-2" />
              Prompt
            </TabsTrigger>
            <TabsTrigger value="visual" className="data-[state=active]:bg-zinc-700">
              <Layout className="w-4 h-4 mr-2" />
              Visual
            </TabsTrigger>
            <TabsTrigger value="persona" className="data-[state=active]:bg-zinc-700">
              <User className="w-4 h-4 mr-2" />
              Persona
            </TabsTrigger>
          </TabsList>

          <TabsContent value="prompt" className="space-y-4 mt-4">
            {selectedPersonaId && (
              <Badge variant="secondary" className="mb-2">
                <User className="w-3 h-3 mr-1" />
                AI Persona Active
              </Badge>
            )}

            <div className="space-y-2">
              <label className="text-sm text-zinc-400">Your Prompt</label>
              <div className="flex gap-2">
                <Textarea
                  placeholder="Enter your prompt here or use voice input... (e.g., 'Write a professional email about...')"
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  className="min-h-[120px] bg-zinc-800/50 border-white/10 text-white placeholder:text-zinc-500 resize-none flex-1"
                  disabled={isLoading || isSanitizing}
                />
                <VoiceInput
                  onTranscript={(text) => setPrompt(prompt + (prompt ? " " : "") + text)}
                  disabled={isLoading || isSanitizing}
                />
              </div>
            </div>

            {safetyWarning && (
              <Alert className="border-amber-500/50 bg-amber-500/10">
                <AlertTriangle className="h-4 w-4 text-amber-500" />
                <AlertDescription className="text-zinc-300">
                  <div className="space-y-2">
                    <p className="font-semibold">Safety issues detected:</p>
                    <ul className="list-disc list-inside text-sm">
                      {safetyWarning.issues.map((issue, idx) => (
                        <li key={idx}>{issue}</li>
                      ))}
                    </ul>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={useSanitizedPrompt}
                      className="mt-2 bg-zinc-800 border-amber-500/50 text-white hover:bg-zinc-700"
                    >
                      Use Safer Version
                    </Button>
                  </div>
                </AlertDescription>
              </Alert>
            )}

            <div className="flex gap-2">
              <Button
                onClick={sanitizePrompt}
                disabled={isLoading || isSanitizing || !prompt.trim()}
                variant="outline"
                className="flex-1 border-white/20 bg-zinc-800/50 text-white hover:bg-zinc-700"
              >
                {isSanitizing ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Checking...
                  </>
                ) : (
                  <>
                    <Shield className="w-4 h-4 mr-2" />
                    Check Safety
                  </>
                )}
              </Button>

              <Button
                onClick={handleSubmit}
                disabled={isLoading || isSanitizing || !prompt.trim()}
                className="flex-1 bg-gradient-to-r from-white to-zinc-100 text-zinc-900 hover:from-zinc-50 hover:to-white font-semibold"
              >
                {isLoading ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Sparkles className="w-4 h-4 mr-2" />
                    Generate
                  </>
                )}
              </Button>
            </div>

            {response && (
              <div className="space-y-2 pt-2">
                <div className="flex items-center justify-between">
                  <label className="text-sm text-zinc-400">AI Response</label>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={handleCopy}
                    className="text-zinc-400 hover:text-white"
                  >
                    {copied ? (
                      <>
                        <CheckCircle className="w-4 h-4 mr-1" />
                        Copied!
                      </>
                    ) : (
                      <>
                        <Copy className="w-4 h-4 mr-1" />
                        Copy
                      </>
                    )}
                  </Button>
                </div>
                <div className="bg-zinc-800/50 border border-white/10 rounded-lg p-4 text-white whitespace-pre-wrap max-h-[400px] overflow-y-auto">
                  {response}
                </div>
              </div>
            )}
          </TabsContent>

          <TabsContent value="visual" className="mt-4">
            <VisualPromptBuilder onPromptGenerated={setPrompt} />
          </TabsContent>

          <TabsContent value="persona" className="mt-4">
            <PersonaSelector
              selectedPersonaId={selectedPersonaId}
              onPersonaSelect={handlePersonaSelect}
            />
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
};
